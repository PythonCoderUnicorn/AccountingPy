print(standard_price)
print(standard_quantity)
print(standard_labor)
print(standard_labor_quantity)
total_standard = (standard_price * standard_quantity) +\
(standard_labor * standard_labor_quantity) + \
(total_rphr * standard_labor_quantity)
print("Total standard cost per unit ...... ${:,}".format(total_standard))
# standard costs
print(standard_price)
print(standard_quantity)
print(standard_labor)
print(standard_labor_quantity)
# manuf overhead
print(total_rphr)
total_standard = (standard_price * standard_quantity) +\
(standard_labor * standard_labor_quantity) + \
(total_rphr * standard_labor_quantity)
print("Total standard cost per unit ...... ${:,}".format(total_standard))
# -------------- standard costs
# print(standard_price)
# print(standard_quantity)
# print(standard_labor)
# print(standard_labor_quantity)
# -------------- manuf overhead
# print(total_rphr)
total_standard = (standard_price * standard_quantity) +\
(standard_labor * standard_labor_quantity) + \
(total_rphr * standard_labor_quantity)
print("Total standard cost per unit ...... ${:,}".format(total_standard))
company_costs = {
'materials_per_unit': {'weight_kg': 1.5, 'cost_per_kg': 4 },
'labor_per_unit': {'hours': 0.25, 'cost_per_hr': 13},
'manufacturing_overhead': {'predetermined_rate': 1.20}
}
def standard_costs2( dict ):
direct_materials = list(dict['materials_per_unit'].values())
dm_std_costs = direct_materials[0] * direct_materials[1]
direct_labor = list(dict['labor_per_unit'].values())
lab_std_costs = direct_labor[0] * direct_labor[1]
manuf_overh = (list(dict['manufacturing_overhead'].values())[0]) * lab_std_costs
total = dm_std_costs + lab_std_costs + manuf_overh
print("- Standard Costs -")
print("Direct Materials Standard Cost ................ ${:,}".format(dm_std_costs))
print("Direct Labor Standard Cost .................... ${:,}".format(lab_std_costs))
print("Manufacturing overhead Standard Cost .......... ${:,}".format(manuf_overh))
print("Total standard cost .................................. ${:,}".format(total))
standard_costs2( company_costs )
company_std = {
'units': 2,
'direct_materials_1':{'cpu': 8, 'units_produced': 22e3},
'direct_materials_2': {'cpu': 7.5, 'units_produced': 10e3}
}
def direct_materials_variance( dict ):
TAQ = list(dict['direct_materials_1'].values())[1]
SP = list(dict['direct_materials_1'].values())[0]
AP = list(dict['direct_materials_2'].values())[0]
TSQ = list(dict['direct_materials_2'].values())[1] * dict['units']
total_materials_var = (TAQ * AP) - (TSQ * SP)
materials_price_var = (TAQ * AP) - (TAQ * SP)
materials_quant_var = (TAQ * SP) - (TSQ * SP)
# print(SP, TAQ, AP, units)
print("Total materials variance ..... ${:,}".format(total_materials_var))
print("Materials price variance ..... ${:,}".format(materials_price_var))
print("Materials quantity variance ..... ${:,}".format(materials_quant_var))
direct_materials_variance( company_std )
lmov = {
'std_cost_labor_hrs': 3,
'std_cost_labor_per_hr' : 12,
'predetermined_overhead_rate_per_hr': 20,
'incurred_labor_hours': 3500,
'avg_rate_per_hr': 12.4,
'manufacturing_overhead_costs': 71300,
'units_produced': 1200
}
def LMOV( dict ):
TAH = dict['incurred_labor_hours']
AR = dict['avg_rate_per_hr']
SR = dict['std_cost_labor_per_hr']
TSHA = dict['units_produced'] * dict['std_cost_labor_hrs']
actual_overhead = dict['manufacturing_overhead_costs']
overhead_applied = TSHA * dict['predetermined_overhead_rate_per_hr']
# total direct labor budget var = ( TAH * AR ) - ( TSHA * SR )
tdlbv = (TAH * AR) - (TSHA * SR)
# labor price var = (TAH * AR ) - (TAH * SR)
lpv = (TAH * AR) - (TAH * SR)
# labor quantity var = (TAH * SR) - (TSHA * SR)
lqv = (TAH * SR) - (TSHA * SR)
# total overhead var = actual overhead - overhead applied
tov = actual_overhead - overhead_applied
print("-- Labor & Manufacturing Overhead Variance -")
print("Total labor variance .......... ${:,}".format(tdlbv))
print("Labor price variance .......... ${:,}".format(lpv))
print("Labor quantity variance ....... ${:,}".format(lqv))
print("Total overhead variance ....... ${:,}".format(tov))
LMOV( lmov )
variances = {
'materials_price': 250,
'materials_quantity': 1100,
'labor_price': 700,
'labor_quantity': 300,
'overhead': 800,
'sales_revenue': 102700,
'cost_of_goods_sold': 61900
}
def report_variance( dict ):
std_gross_profit = dict['sales_revenue'] - dict['cost_of_goods_sold']
tot_vars = sum(list(dict.values())[:-2])
# -- 700 is element 2 in the list array and for this example subtracted
a = list(dict.values())[:-2]
b = a[0:2]
c = a[3:5]
fav_var = sum(b+c) - a[2]
gross_profit_actual = std_gross_profit + fav_var
print("- Report on Variance -")
print("Standard gross profit ................. ${:,}".format(std_gross_profit))
print("total variance  ....................... ${:,}".format(tot_vars))
print("total variance favorable  ............. ${:,}".format(fav_var))
print("Gross profit (actual)  ................ ${:,}".format(gross_profit_actual))
report_variance( variances )
investment = 130e3
estimated_life = 10
estimated_salvage = 0
cash_inflow_customers = 200e3
cash_outflow_operations = 176e3
annual_cashflow = cash_inflow_customers - cash_outflow_operations
print("Net annual cash flow ..... ${:,}".format(annual_cashflow))
new_equipment {
'investment' : 130e3,
'estimated_life': 10,
'estimated_salvage':  0,
'cash_inflow_customers':  200e3,
'cash_outflow_operations': 176e3
}
def investment_cashflow( dict ):
annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']
print("Net annual cash flow from investment ........... ${:,}".format(annual_cashflow))
investment_cashflow( new_equipment)
new_equipment {
'investment' : 130e3,
'estimated_life': 10,
'estimated_salvage':  0,
'cash_inflow_customers':  200e3,
'cash_outflow_operations': 176e3
}
def investment_cashflow( dict ):
annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']
print("Net annual cash flow from investment ........... ${:,}".format(annual_cashflow))
investment_cashflow( new_equipment)
new_equipment = {
'investment' : 130e3,
'estimated_life' : 10,
'estimated_salvage' :  0,
'cash_inflow_customers' :  200e3,
'cash_outflow_operations' : 176e3
}
def investment_cashflow( dict ):
annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']
print("Net annual cash flow from investment ........... ${:,}".format(annual_cashflow))
investment_cashflow( new_equipment)
cpt = investment / annual_cashflow
useful_life = cpt/estimated_life*100
print("Cash payback technique ....... {:.2f} years ({:.2f}% of asset's life)".format(cpt, useful_life ))
new_equipment = {
'investment' : 130e3,
'estimated_life' : 10,
'estimated_salvage' :  0,
'cash_inflow_customers' :  200e3,
'cash_outflow_operations' : 176e3
}
def investment_cashflow( dict ):
annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']
print("Net annual cash flow from investment ........... ${:,}".format(annual_cashflow))
investment_cashflow( new_equipment)
cpt = investment / annual_cashflow
useful_life = cpt/estimated_life*100
print("Cash payback technique ....... {:.2f} years ({:.2f}% of asset's life)".format(cpt, useful_life ))
new_equipment = {
'investment' : 130e3,
'estimated_life' : 10,
'estimated_salvage' :  0,
'cash_inflow_customers' :  200e3,
'cash_outflow_operations' : 176e3
}
def investment_cashflow( dict ):
annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']
print("Net annual cash flow from investment ........... ${:,}".format(annual_cashflow))
cpt = dict['investment'] / annual_cashflow
useful_life = cpt/ dict['estimated_life']*100
print("Cash payback technique ....... {:.2f} years ({:.2f}% of asset's life)".format(cpt, useful_life ))
investment_cashflow( new_equipment)
cashback = {
'investment_cost': 900e3,
'estimated_life' : 6,
'estimated_salvage' : 0,
'cash_inflow_customers' : 400e3,
'cash_outflow_operations' : 190e3
}
def payback_period( dict ):
investment = dict['investment_cost']
estimated_life = dict['estimated_life']
cash_inflow_customers = dict['cash_inflow_customers']
cash_outflow_operations = dict['cash_outflow_operations']
annual_cashflow = cash_inflow_customers - cash_outflow_operations
print("Net annual cash flow ......... ${:,}".format(annual_cashflow))
cpt = investment / annual_cashflow
useful_life = cpt/estimated_life*100
print("Cash payback technique ....... {:.2f} years ({:.0f}% of asset's life)".format(cpt, useful_life ))
payback_period( cashback )
investment = 130e3
estimated_life = 10
estimated_salvage = 0
cash_inflow_customers = 200e3
cash_outflow_operations = 176e3
annual_cashflow = cash_inflow_customers - cash_outflow_operations
print("Net annual cash flow ..... ${:,}".format(annual_cashflow))
annuity_value = 5.65022 # value from a table
pv = annual_cashflow * annuity_value
npv = pv - investment
print("Net present value ........ ${:.2f}".format(npv))
equal_cashflow = {
'investment': 130e3,
'estimated_life' : 10,
'estimated_salvage':  0,
'cash_inflow_customers': 200e3,
'cash_outflow_operations': 176e3
}
def equal_cashflows( annuity_value,  dict ):
annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']
print("Net annual cash flow ..... ${:,}".format(annual_cashflow))
# annuity_value = 5.65022 # value from a table
pv = annual_cashflow * annuity_value
npv = pv - investment
print("Net present value ........ ${:.2f}".format(npv))
equal_cashflows( 5.65022, equal_cashflow )
import numpy as np
# create an array 0 to 9
years = np.arange(10)
# assumed annual net cash flows 18,000 to 24,000 (for 10 years)
yearly_cashflows = [34e3, 30e3, 27e3,25e3,24e3,22e3,21e3,20e3,19e3, 18e3]
# discount_factor for 12% values from a table for 10 periods (n)
discount_factor = [0.89286, 0.79719,0.71178,0.63552,0.56743,0.50663,0.45235,0.40388,0.36061,0.32197]
capital_investment = 130e3
# present values
pv = []
for x in range(len(years)):
PV = yearly_cashflows[x] * discount_factor[x]
pv.append(PV)
# print("Year: {} Present value @ 12% ... ${:.2f}".format(years[x]+1, pv[x]))
total_pv = sum(pv)
npv = total_pv - capital_investment
print("Present value @ 12% cash flows ..... ${:,}".format( total_pv ))
print("Net present value .................. ${:.2f}".format( npv ))
import numpy as np
# create an array 0 to 9
years = np.arange(10)
# assumed annual net cash flows 18,000 to 24,000 (for 10 years)
yearly_cashflows = [34e3, 30e3, 27e3,25e3,24e3,22e3,21e3,20e3,19e3, 18e3]
# discount_factor for 12% values from a table for 10 periods (n)
discount_factor = [0.89286, 0.79719,0.71178,0.63552,0.56743,0.50663,0.45235,0.40388,0.36061,0.32197]
capital_investment = 130e3
# present values
pv = []
for x in range(len(years)):
PV = yearly_cashflows[x] * discount_factor[x]
pv.append(PV)
print("Year: {} Present value @ 12% ... ${:.2f}".format(years[x]+1, pv[x]))
total_pv = sum(pv)
npv = total_pv - capital_investment
print("Present value @ 12% cash flows ..... ${:,}".format( total_pv ))
print("Net present value .................. ${:.2f}".format( npv ))
def unequal_cashflows():
import numpy as np
# create an array 0 to 9
years = np.arange(10)
# assumed annual net cash flows 18,000 to 24,000 (for 10 years)
yearly_cashflows = [34e3, 30e3, 27e3,25e3,24e3,22e3,21e3,20e3,19e3, 18e3]
# discount_factor for 12% values from a table for 10 periods (n)
discount_factor = [0.89286, 0.79719,0.71178,0.63552,0.56743,0.50663,0.45235,0.40388,0.36061,0.32197]
capital_investment = 130e3
# present values
pv = []
for x in range(len(years)):
PV = yearly_cashflows[x] * discount_factor[x]
pv.append(PV)
# comment out this line to only show the final total present value
print("Year: {} Present value @ 12% ... ${:.2f}".format(years[x]+1, pv[x]))
total_pv = sum(pv)
npv = total_pv - capital_investment
print("Present value @ 12% cash flows ..... ${:,}".format( total_pv ))
print("Net present value .................. ${:.2f}".format( npv ))
unequal_cashflows()
def discount_rate(cashflow: int, investment: int):
rate1 = cashflow * 5.65022  # 12%
rate2 = cashflow * 5.01877  # 15%
npv1 = round(rate1 - investment, 2)
npv2 = round(rate2 - investment, 2)
print(" - Discount Rate -")
print("Net present value for {}% ..... ${:,}".format(12, npv1) )
print("Net present value for {}% ..... ${:,}".format(15, npv2) )
discount_rate(24e3, 130e3)
cashback = {
'investment_cost': 900e3,
'estimated_life' : 6,
'estimated_salvage' : 0,
'cash_inflow_customers' : 400e3,
'cash_outflow_operations' : 190e3,
'rate_of_return': 0.09 # discount rate
}
def present_value( annuity: float, dict ):
investment = dict['investment_cost']
estimated_life = dict['estimated_life']
cash_inflow_customers = dict['cash_inflow_customers']
cash_outflow_operations = dict['cash_outflow_operations']
annual_cashflow = cash_inflow_customers - cash_outflow_operations
print("Net annual cash flow ......... ${:,}".format(annual_cashflow))
cpt = investment / annual_cashflow
useful_life = cpt/estimated_life*100
print("Cash payback technique ....... {:.2f} years ({:.0f}% of asset's life)".format(cpt, useful_life ))
# annuity_value = 4.48592 # value from a table
pv = annual_cashflow * annuity #annuity_value
npv = round(pv - investment,2)
print("Net present value ............. ${:,}".format(npv))
def present_value( annuity: float, dict ):
investment = dict['investment_cost']
estimated_life = dict['estimated_life']
cash_inflow_customers = dict['cash_inflow_customers']
cash_outflow_operations = dict['cash_outflow_operations']
annual_cashflow = cash_inflow_customers - cash_outflow_operations
print("Net annual cash flow ......... ${:,}".format(annual_cashflow))
cpt = investment / annual_cashflow
useful_life = cpt/estimated_life*100
print("Cash payback technique ....... {:.2f} years ({:.0f}% of asset's life)".format(cpt, useful_life ))
# annuity_value = 4.48592 # value from a table
pv = annual_cashflow * annuity #annuity_value
npv = round(pv - investment,2)
print("Net present value ............. ${:,}".format(npv))
present_value( 4.48592, cashback )
robot_investment = {
'investment_cost': 200e3,
'estimated_life' : 10,
'estimated_salvage' : 0,
'cash_inflow_customers' : 50e3,
'cash_outflow_operations' : 20e3,
'rate_of_return': 0.12 # discount rate
}
present_value( 5.65022, robot_investment )
robot_investment2 = {
'investment_cost': 200e3,
'estimated_life' : 10,
'estimated_salvage' : 0,
'cash_inflow_customers' : 60e3,
'cash_outflow_operations' : 15e3,
'rate_of_return': 0.12 # discount rate
}
present_value( 5.65022, robot_investment2 )
npv1 = abs(-30493.4)
npv2 = 54259.9
if npv2 > npv1:
print("Company should accept project")
else:
print("do not accept project")
projects = {
'project_A': {
'investment': 40e3,
'annual_cash_inflow': 10e3,
'salvage_value': 5e3
},
'project_B': {
'investment': 90e3,
'annual_cash_inflow': 19e3,
'salvage_value': 10e3
}
}
projects = {
'project_A': {
'investment': 40e3,
'annual_cash_inflow': 10e3,
'salvage_value': 5e3
},
'project_B': {
'investment': 90e3,
'annual_cash_inflow': 19e3,
'salvage_value': 10e3
}
}
def exclusive_projects( annuity1: float, annuity2: float, dict ):
# project A
projA = list(dict['project_A'].values())
investmentA = projA[0]
cash_inflow_A = projA[1]
salvage_A = projA[2]
# project B
projB = list(dict['project_B'].values())
investmentB = projB[0]
cash_inflow_B = projB[1]
salvage_B = projB[2]
pvA = round( (cash_inflow_A * annuity1) + (salvage_A * annuity2), 2)
pvB = round( (cash_inflow_B * annuity1) + (salvage_B * annuity2), 2)
print("Project A : present value of net cash flows ............. ${:,}".format(pvA))
print("Project B : present value of net cash flows ............. ${:,}\n".format(pvB))
npvA = round(pvA - investmentA, 2)
npvB = round(pvB - investmentB, 2)
print("Project A : Net present value ............. ${:,}".format(npvA))
print("Project B : Net present value ............. ${:,}".format(npvB))
if npvA > npvB:
print(" Project A has higher NPV", '\U0001f7e1')
else:
print(" Project B has higher NPV", '\U0001f7e1')
# -- profitability index
pindexA = round(pvA / investmentA, 2)
pindexB = round(pvB / investmentB, 2)
print("\nProject A : Profitability Index ............. {:.2f}".format(pindexA))
print("Project B : Profitability Index ............. {:.2f}".format(pindexB))
if pindexA > pindexB:
print(" Project A has higher profitability", '\U0001f7e2')
else:
print(" Project B has higher profitability", '\U0001f7e2')
a12 = 5.65022
b12 = 0.32197
exclusive_projects(a12, b12, projects)
machine_investment = {
'investment_cost': 900e3,
'estimated_life' : 6,
'estimated_salvage' : 0,
'cash_inflow_customers' : 400e3,
'cash_outflow_operations' : 190e3,
'rate_of_return': 0.09 # REQUIRED /discount rate
}
def irr( annuity: float, dict ):
investment = dict['investment_cost']
estimated_life = dict['estimated_life']
cash_inflow_customers = dict['cash_inflow_customers']
cash_outflow_operations = dict['cash_outflow_operations']
annual_cashflow = cash_inflow_customers - cash_outflow_operations
print("Net annual cash flow ....................... ${:,}".format(annual_cashflow))
cpt = investment / annual_cashflow
print("Internal Rate of Return factor (IRR) ....... {:.2f} years ".format(cpt  ))
pv = annual_cashflow * annuity #annuity_value
npv = round(pv - investment,2)
# print("Net present value .......................... ${:,}".format(npv))
# Table : 6 periods, 9%
annuity = 4.48592
irr( annuity, machine_investment )
# table values for 10% and 11%
nums = [4.35526, 4.23054]
print("IRR factors for 10% and 11% (averaged) = ",sum(nums)/2)
machine_investment2 = {
'sales': 200e3,
'investment_cost': 130e3,
'estimated_life' : 5,
'estimated_salvage' : 0,
'manufacturing_costs': 132e3,
'selling_admin': 22e3,
'income_tax_expense': 7e3
}
def annual_return( dict ):
sales = dict['sales']
manuf_costs = dict['manufacturing_costs']
depreciation = dict['investment_cost'] / dict['estimated_life']
sell_admin= dict['selling_admin']
tax_exp = dict['income_tax_expense']
cost_expenses = manuf_costs + depreciation + sell_admin
print("Costs & Expenses ........................ ${:,}".format(cost_expenses))
income_b4_tax = sales - cost_expenses
print("Income before income taxes .............. ${:,}".format(income_b4_tax))
net_income = income_b4_tax - tax_exp
print("Net income .............................. ${:,}".format(net_income))
avg_investment = (dict['investment_cost'] + dict['estimated_salvage'])/2
print("Average investment ...................... ${:,}".format(avg_investment))
# expected annual rate of return on investment in new equipment/ machine
exp_return = net_income / avg_investment
print("Expected annual rate of return ...................... {:,}%".format(exp_return *100))
annual_return( machine_investment2 )
def annual_return2( dict ):
revenue = dict['cash_inflow_customers']
expenses = dict['cash_outflow_operations']
depreciation = dict['investment_cost'] /dict['estimated_life']
cost_expenses = expenses + depreciation
net_income = revenue - cost_expenses
print("Revenue ................................. ${:,}".format(revenue))
print("Costs & Expenses ........................ ${:,}".format(cost_expenses))
print("Annual net income ....................... ${:,}".format(net_income))
avg_investment = (dict['investment_cost'] + dict['estimated_salvage'])/2
print("Average investment ...................... ${:,}".format(avg_investment))
# expected annual rate of return on investment in new equipment/ machine
exp_return = round(net_income / avg_investment, 2)*100
print("Expected annual rate of return (ARR) ...................... {:,}%".format(exp_return ))
RRR = dict['rate_of_return'] *100
# print(RRR)
# if ARR > RRR
if exp_return > RRR:
print(" project should go ahead (ARR > RRR) ", '\U0001f7e2')
else:
print(" project should not go ahead (ARR < RRR) ", '\U0001f7e0')
annual_return2( machine_investment )
equal_cashflow = {
'investment': 130e3,
'estimated_life' : 10,
'estimated_salvage':  0,
'cash_inflow_customers': 200e3,
'cash_outflow_operations': 176e3
}
def equal_cashflows( annuity_value,  dict ):
annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']
print("Net annual cash flow ..... ${:,}".format(annual_cashflow))
# annuity_value = 5.65022 # value from a table
pv = annual_cashflow * annuity_value
npv = pv - dict['investment']
print("Net present value ........ ${:.2f}".format(npv))
equal_cashflows( 5.65022, equal_cashflow )
reticulate::repl_python()
