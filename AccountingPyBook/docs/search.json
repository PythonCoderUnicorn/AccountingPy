[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a book created from a variety of Accounting textbooks used in a University degree. The goal is to make this book an all in one resource on Accounting main concepts while teaching how to use the programming language of Python to make the various accounting calculations faster and iteratively.\nMany accounting calculations are repetitive and usually one calculation ties into another calculation, which makes it very suitable for using functions that use already calculated output. Typically the Accounting world uses Microsoft Excel or proprietary software such as SAS or SPSS or others, while Python is free to use and learning the Python language is very much a valuable skill.\nOften you have accounting information stored in .xlsx files or pdf files, none of which are reproducible when you pass to a colleague or classmate. Mistakes are easy to make when working with Excel sheets, one cell can have a function but that cell’s function is not obvious and errors can happen if that cell gets altered. In Python, you can take in a xlsx or pdf file, read the data from it and run your functions to make calculations and then make a dashboard, a presentation or a web app that anyone can just go to the url and use the app.\nBy learning Python you are learning how to be more efficient with your accounting, as you write one function to calculate cost of goods sold, then you can just use that same function a million times. That function can live in one file somewhere on your computer and you can call (import) it into the current running file and still get the output you want.\nThis book will show how to make use of Python’s data objects that store data and place these into function to make our calculations repeatable. This book is a companion to the YouTube channel AccountingPy."
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "1  Chapter 1",
    "section": "",
    "text": "hello world !"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AccountingPy",
    "section": "",
    "text": "Welcome\nThis is a free online textbook on Accounting using Python."
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Accounting - the information system that identifies and records the economic events of an organization and then communicates them to a wide variety of interested users.\naccounts receivable - the operation of receiving money in the future from customers. This is an asset as they represent an economic resource (cash) and will be eventually collected.\naccounts payable - short term liability from some expenses when a company purchases inventory or supplies on credit from suppliers.\ninterest payable - the outstanding (unpaid) liability amounts owed to various lenders and creditors\n\ndividends payable, salaries payable, property payable, sales tax payable\n\nBusiness goal is to sell a good or service for a price greater than the cost of producing or purchasing the good or providing the service, plus the cost of operating the business.\nnet income - revenues are greater than the expenses incurred to generate the revenues. (net earnings, profit)\nInternal users - internal accounting information manage companies, non-profits and government organizations, help these organizations make decisions required to run the company.\nExternal users - do not have access to internal accounting information, the general public.\nPrimary users:\n\ninvestors : use accounting information to make decisions to buy, hold, or sell their ownership shares\nlenders: use accounting information to evaluate the risks of lending money\ncreditors: use accounting information to decide whether or not to grant credit to a customer\n\nProprietorship - a business owned by one person, (sole proprietorship)\nreporting entity concept - the separation of business and personal records of economic activity, to be distinct from activities of the owner and all other economic entities.\nPartnerships - a business owned by more than one person\nCorporations - a business organized as a separate legal entity owned by shareholders and is the most complex form of business to establish.\nPublic corporations - corporations that share their shares/stocks on the Stock Exchange, and are required to distribute their financial statements to investors, lenders, creditors and the public every three months.\nSEDAR - system for electronic document analysis and retrieval, financial statement website for Canadian public corporations\nPrivate corporations - corporations that issue shares but they do not make them public, nor are the shares traded on the Stock Exchange.\nGAAP - generally accepted accounting principles, which are rules,practices, procedures for recording and reporting economic events.\nIFRS - public traded corporations must use the international financial reporting standards\nASPE - for private corporations must use accounting standards for private enterprises\nbusiness activities = financing (money to expand operations), investing (building, renovations, purchasing) and operating (activities that finance company)\n\nFinancial activities\nCapital (money) is required to start any business. Methods for raising funds for corporations:\n\nissuing (selling) shares (equity financing)\nborrowing money (debt financing)\n\ncommon shares (share capital) - the amount paid by investors for shares of ownership in a company, these investors are shareholders\ndividends - payments that distribute a portion of income to shareholders\nliabilities - amounts owed to lender and creditors in form of debt and obligations\nbank indebtedness - this liability is when a company uses its operating line of credit to cover cash shortfalls and overdraws its bank account\nCorporations can borrow using a short-term bank loan payable (note payable) or long term debt which can include mortgages payable, bonds payable, finance lease obligations and other types of debt securities.\n\n\nInvesting activities\nPost fund raising, the money i sused for investing activities, which include purchase or sale of long lived assets that a company needs in order to operate.\nAssets - resources that a company owns or controls. “property, plant and equipment” phrase is used to sum up all the assets of a company.\ngoodwill - when a company pays more than the value of purchased company’s net identifiable assets when acquiring a company\nintangible assets - assets that do not have any physical substance themselves but represent a privilege or a right granted to a company\n\npurchase is outflow, sale is inflow\n\n\n\nOperating activities\nA company has raised funds and investments, it now does operating activities.\nSources of income (finance income):\n\nsales revenue\nservice revenue\ninterest revenue\nrent revenue\n\naccounts receivable - the operation of receiving money in the future from customers. This is an asset as they represent an economic resource (cash) and will be eventually collected.\n\nsupplies are short term assets used in daily operations\ninventory are items held for future sale to customers. When items are sold, they become an expense\n\nThe cost of inventory sold is an expense called cost of goods sold.\n\nexpenses are decreases in economic resources\nother names for expenses = cost of sales, selling operating and administrative expenses, and income tax expense.\n\naccounts payable - short term liability from some expenses when a company purchases inventory or supplies on credit from suppliers.\ninterest payable - the outstanding (unpaid) liability amounts owed to various lenders and creditors\n\ndividends payable, salaries payable, property payable, sales tax payable\n\nBusiness goal is to sell a good or service for a price greater than the cost of producing or purchasing the good or providing the service, plus the cost of operating the business.\nnet income - revenues are greater than the expenses incurred to generate the revenues. (net earnings, profit)\n\n\nFinancial statements\nFor external reporting purposes to provide information on assets,liabilities, shareholders equity and cash flow.\nThere are 4 required financial statements:\n\nincome statement - reports revenues and expenses, showing how a company’s operations performed during a period of time\nstatement of changes in equity - shows changes in each component of shareholders equity (common shares and retained earnings) and total equity during period of time\nstatement of financial position - what a company owns (assets), what it owes (liabilities) and resulting difference (shareholder equity) at a specific point in time\nstatement of cash flows - where a company obtained cash during a period of time and how that cash was used\n\n\nStatement of changes in Equity\nAccount balances at the beginning of the period and ends with the account balances at the end of the period. The ownership interest in a company is known as shareholder’s equity, which is the total shareholder’s equity including:\n\nshare capital : the amounts contributed by the shareholders in exchange for shares of ownership\nretained earnings\nother accounts\n\ncommon shares (end of period) = common shares (begin of period) + common shares issued (sold) - common shares repurchased\nretained earnings - the cumulative amounts of net income that have been retained in the corporation (not distributed as dividends to shareholders). If retained earnings is negative that is net loesses have exceeded net income (deficit)"
  },
  {
    "objectID": "chapter1.html#the-purpose-use-of-financial-statements",
    "href": "chapter1.html#the-purpose-use-of-financial-statements",
    "title": "2  Financial Accounting",
    "section": "2.1 The Purpose & Use of Financial Statements",
    "text": "2.1 The Purpose & Use of Financial Statements\nFinancial Statements provide the means of communicating the economic events of an organization and sharing with a variety of interested users.\nOne important function to calculate is the net income, using Python we can make a function to calculate this so in the future we can simply pass in the data required then get the output.\n`"
  },
  {
    "objectID": "pythonbasics.html",
    "href": "pythonbasics.html",
    "title": "1  Python Basics",
    "section": "",
    "text": "Hello, welcome to the crash course on Python basics! This section will get you very quickly introduced to Python in order for you to follow along with the book.\nThere are numerous Python tutorials that will help you fully understand the programming language. Some resources I personally have found very helpful (general python learning, various topics):\n\nReal Python tutorials. Very beginner friendly\nfreecodecamp (YouTube, 4.5 hours long) - Python full tutorial\nTech with Tim (YouTube)\nPatrick Loeber (YouTube)\n\nNone of the links above deal with accounting but will provide depth in explanations of the code you will see here.\n6+3"
  },
  {
    "objectID": "pythonbasics.html#variables",
    "href": "pythonbasics.html#variables",
    "title": "1  Python Basics",
    "section": "1.1 Variables",
    "text": "1.1 Variables\nVariables are names to store data. If you have a long variable name, use underscores (_) to keep the words together. For long numbers you can use the underscore to act like a comma, but do not use a comma like you would in Excel.\nSome simple rules for variable names:\n\nvariables can’t start with a dot or have a dot in the name (.)\nvariables can’t start with a number or special character\n\nvariable_one = \"variable string\"\n\nvariable_1 = 1\nvariable1 = 1\n\nVariables are essential in programming, you make a variable in order for you to use again and again. Variables are limited in where they can be accessed (used) in a program based on the function scope (scope ?) but allows for reprodicibility within your program."
  },
  {
    "objectID": "pythonbasics.html#strings",
    "href": "pythonbasics.html#strings",
    "title": "1  Python Basics",
    "section": "1.2 Strings",
    "text": "1.2 Strings\nStrings are typically letters but anything can be a string, as a string is anything inside ” ” or ’ ’ quotation marks. Strings are stored inside a variable which you get to name whatever you want. Note: some words are reserved and cannot be used; while, if, break, else, etc. If you use a reserved word you get an error and will not be able to run your code.\nstringy = \"pasta noodles\"\n\nchartered_accountant = \"Jane Doe\"\n\nstring_number = \"899\"\nEverything that is inside ” ” is considered a data type of string, this is important to remember as you can get errors or get output you are not expecting if you call (use) some functions on a string data type variable meant for a numerical data type.\na = \"5\"\nb = \"10\"\n\ny = a + b\nThe output for y is not 15, as that is numerical addition, instead you will get concatenation of strings a and b, resulting in “510”."
  },
  {
    "objectID": "pythonbasics.html#numbers-int-and-float",
    "href": "pythonbasics.html#numbers-int-and-float",
    "title": "1  Python Basics",
    "section": "1.3 Numbers (int and float)",
    "text": "1.3 Numbers (int and float)\nAccounting mainly deals with numbers with decimals, known as floats (floating point decimal numbers) and integers (numbers without decimals). Using these data types is easy to do, just create a variable and store the numerical value to that variable.\nx = 6754\ny = 122.78\n\nz = x + y \n\nThe value of z is 6876.78. In a Python file (.py) you will need to use the print() function to see the answer, but using a Jupyter Notebook, you can simply add x and y and get the output printed."
  },
  {
    "objectID": "pythonbasics.html#string-formatting",
    "href": "pythonbasics.html#string-formatting",
    "title": "1  Python Basics",
    "section": "1.4 String formatting",
    "text": "1.4 String formatting\nTo print out the variables and calculations, you need to use the print() function. String formatting allows for reusable code and simpler code to write. Learning it now will help build the skill. Formatting uses the syntax f\" \" inside a print function with { } to store the variable name.\nFor rounding numbers when you want to only show numeric values that have limited decimal places you use the .format() function without using the f”” inside the print function.\n\ninside the {:.2f} means 2 decimal places format, the number can be 1 or more\nfor output numberical values that are long, you can use {:,} which means to add commas to the numbers\n\naccountant_name = \"Jane Doe\"\noffice_expenses = 105_900.7688128\n\nprint(f\" Hello Python Accountant {accountant_name} \")\nprint(\" The office budget is ${:.2f}\".format( office_expenses ))\nprint(\" The office budget is ${:,}\".format( office_expenses ))\n\n\n# output\nHello Python Accountant Jane\nThe office budget is $105900.77\nThe office budget is $105,900.768"
  },
  {
    "objectID": "pythonbasics.html#lists",
    "href": "pythonbasics.html#lists",
    "title": "1  Python Basics",
    "section": "1.5 Lists",
    "text": "1.5 Lists\nPython lists are very useful and are also known as arrays (when using the NumPy library).\n\ncan store various data items, duplicates are allowed which is important to know.\nLists can be empty and the values can be changed (mutable).\n\nIMPORTANT TO KNOW :\n\nevery list, dictionary, set and string all start at 0 zero not 1, start counting at 0 or use n - 1 to get the correct index value.\n\naccounting_list = ['shareholders equity',233, True,\"liabilities\", 99]\n\nprint( accounting_list )\n\n# output\n['shareholders equity', 233, True, 'liabilities', 99]\n\n1.5.1 Array slicing\nTo get specific elements in the array list you can use slicing. To get the 2nd item (element) from the list, remember n - 1 for index number.\naccounting_list[1]\n\n# output\n233\nTo get the last element in the array list, you can use -1, which means the 1st one from the end. If you wanted the second last element, -2, and so forth.\naccounting_list[-1]\n# output\n99\n\n\n1.5.2 Change element in list\nSay we want to change ‘liabilities’ to ‘purchases’, we use the index of element we want to change and assign the new variable.\naccounting_list[3] = \"purchases\"\naccounting_list\n\n# output\n['shareholders equity', 233, True, 'purchases', 99]\n\n\n1.5.3 Get more than 1 element\nIf you are interested in only a few or specific elements in a list you can specify the indexes of the elements of the list. In this example, we want the first to the second elements.\naccounting_list[0:3]\n\n# output\n['shareholders equity', 233, True]\n\n\n1.5.4 List length\nKnowing how long a list is, how many elements that are inside the list object is very useful to know for using in for loops.\nlen( accounting_list )\n\n# output\n5\n\n\n1.5.5 Add elements to list\nPython lists can be modified by adding to the list array. Since we store all of the elements into a variable we can use the name of the list and call functions on that variable such as .append() to add to an existing list.\nIn this example we just want to add ‘income_sheets’ to the list. Note: if you call this function more than once, Python will keep adding this one variable to the list.\naccounting_list.append(\"income_sheets\")\naccounting_list\n\n# output\n['shareholders equity', 233, True, 'purchases', 99, 'income sheets']\n\n\n1.5.6 Join lists\nIf you have one list array and want to join or merge them together, you can use .extend() function.\nsheet1 = [\"Accounts payable\",\"debts receivable\",\"credit payable\"]\nsheet2 = [\"balance sheet\",\"assets & liabilities\"]\n\nsheet1.extend(sheet2)\n\nprint( sheet1 )\n\n# output\n['Accounts payable', 'debts receivable', 'credit payable', 'balance sheet', 'assets & liabilities']\n\n\n1.5.7 Delete element\nYou can delete an element from a list array, using the pop() function which by default removes the very last element in an array, but if you provide the index number it will remove that element.\nIn this example we will remove the element “True” from index 2. Note: Python will keep deleting elements from your list if this function is called repeatedly.\naccounting_list.pop(2)\naccounting_list\n\n# output\n['shareholders equity', 233, 'purchases']\n\n\n1.5.8 List for loops\nfor loops are functions that will iterate over a Python object such as a list or dictionary, dataframe or even a string. For loops are important to know and are essential for becoming efficient in programming.\nIf you have a list of assets and quickly want to print them out to see what they are or perform a math function for loops are what to use.\nIn this example we want to loop through the numbers 0 to 4, and print out each number. The range() by default understands what the start and end of the range is but could be explicitly defined. If you wanted 1 to 5, range(1,6).\n\nNote: “for x in something”, the x can be named just about anything (just not a reserved word in Python).\n\nfor x in range(5):\n    print(x)\n\n# output\n0\n1\n2\n3\n4\nSay we have a list of a client’s assets, and we want it iterate through the list and print them. We want to know the length of the list in order to tell the for loop to stop at the end of the list, this serves 2 purposes: 1) you can modify the list (add or delete elements) and the for loop will keep working, and 2) by knowing the length of the list prevents errors when looping through a list and tries to find an element index that does not exist.\n\nrange( len( list_name ))\nindex of the loop is needed, hence client_assets[items] which goes through the list array and prints the index location value\n\nclient_assets = ['boat','house','fancy car','comic book collection','stocks']\n\nfor items in range( len( client_assets )):\n    print( client_assets[items] )\n\n# output\nboat\nhouse\nfancy car\ncomic book collection\nstocks\nUsing for loops is going to be something you will need to understand and get comfortable with in order to make your accounting more efficient.\nWhile loops will be purposefully ignored as they are very easy to mess up and crash your program. You may wish to learn them on your own but I caution you not to unless you have experience coding in Python.\n\n\n1.5.9 List sorting\nYou can sort or reverse a list, simply by calling .sort() function and .reverse() on the list variable name.\ncommon_assets = ['z item','investments','cash','inventory','supplies']\n\ndividends_paid = [100,1001.1,1020,101,300,301,90,9]\n\ncommon_assets.sort()\ndividends_paid.sort()\n\nprint( common_assets )\nprint( dividends_paid )\n\n# output\n['cash', 'inventory', 'investments', 'supplies', 'z item']\n[9, 90, 100, 101, 300, 301, 1001.1, 1020]\n\n# reverse\ndividends_paid.reverse()\nprint( dividends_paid )\n\n# output\n[1020, 1001.1, 301, 300, 101, 100, 90, 9]"
  },
  {
    "objectID": "pythonbasics.html#tuples",
    "href": "pythonbasics.html#tuples",
    "title": "1  Python Basics",
    "section": "1.6 Tuples",
    "text": "1.6 Tuples\nTuples store data but are immutable and tuples index each element. Say we want to store 3 holiday gift ideas for the office.\n\n\nShow the code\ngifts = ('Subway sandwich gift card',\"Starbucks coffee gift card\", \"Apple iTunes gift card\")\n\nprint( gifts[2:3])\n\n\n('Apple iTunes gift card',)\n\n\nand to loop through the tuple\n\n\nShow the code\nfor xmas in gifts:\n  print(xmas)\n\n\nSubway sandwich gift card\nStarbucks coffee gift card\nApple iTunes gift card\n\n\n\n\nShow the code\n6+8*8\n\n\n70"
  }
]