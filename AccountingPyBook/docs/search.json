[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a book created from a variety of Accounting textbooks used in a University degree. The goal is to make this book an all in one resource on Accounting main concepts while teaching how to use the programming language of Python to make the various accounting calculations faster and iteratively.\nMany accounting calculations are repetitive and usually one calculation ties into another calculation, which makes it very suitable for using functions that use already calculated output. Typically the Accounting world uses Microsoft Excel or proprietary software such as SAS or SPSS or others, while Python is free to use and learning the Python language is very much a valuable skill.\nOften you have accounting information stored in .xlsx files or pdf files, none of which are reproducible when you pass to a colleague or classmate. Mistakes are easy to make when working with Excel sheets, one cell can have a function but that cell’s function is not obvious and errors can happen if that cell gets altered. In Python, you can take in a xlsx or pdf file, read the data from it and run your functions to make calculations and then make a dashboard, a presentation or a web app that anyone can just go to the url and use the app.\nBy learning Python you are learning how to be more efficient with your accounting, as you write one function to calculate cost of goods sold, then you can just use that same function a million times. That function can live in one file somewhere on your computer and you can call (import) it into the current running file and still get the output you want.\nThis book will show how to make use of Python’s data objects that store data and place these into function to make our calculations repeatable. This book is a companion to the YouTube channel AccountingPy."
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "1  Chapter 1",
    "section": "",
    "text": "hello world !"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AccountingPy",
    "section": "",
    "text": "Welcome\nThis is a free online textbook on Accounting using Python."
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Accounting - the information system that identifies and records the economic events of an organization and then communicates them to a wide variety of interested users.\naccounts receivable - the operation of receiving money in the future from customers. This is an asset as they represent an economic resource (cash) and will be eventually collected.\naccounts payable - short term liability from some expenses when a company purchases inventory or supplies on credit from suppliers.\ninterest payable - the outstanding (unpaid) liability amounts owed to various lenders and creditors\n\ndividends payable, salaries payable, property payable, sales tax payable\n\nBusiness goal is to sell a good or service for a price greater than the cost of producing or purchasing the good or providing the service, plus the cost of operating the business.\nnet income - revenues are greater than the expenses incurred to generate the revenues. (net earnings, profit)\nInternal users - internal accounting information manage companies, non-profits and government organizations, help these organizations make decisions required to run the company.\nExternal users - do not have access to internal accounting information, the general public.\nPrimary users:\n\ninvestors : use accounting information to make decisions to buy, hold, or sell their ownership shares\nlenders: use accounting information to evaluate the risks of lending money\ncreditors: use accounting information to decide whether or not to grant credit to a customer\n\nProprietorship - a business owned by one person, (sole proprietorship)\nreporting entity concept - the separation of business and personal records of economic activity, to be distinct from activities of the owner and all other economic entities.\nPartnerships - a business owned by more than one person\nCorporations - a business organized as a separate legal entity owned by shareholders and is the most complex form of business to establish.\nPublic corporations - corporations that share their shares/stocks on the Stock Exchange, and are required to distribute their financial statements to investors, lenders, creditors and the public every three months.\nSEDAR - system for electronic document analysis and retrieval, financial statement website for Canadian public corporations\nPrivate corporations - corporations that issue shares but they do not make them public, nor are the shares traded on the Stock Exchange.\nGAAP - generally accepted accounting principles, which are rules,practices, procedures for recording and reporting economic events.\nIFRS - public traded corporations must use the international financial reporting standards\nASPE - for private corporations must use accounting standards for private enterprises\nbusiness activities = financing (money to expand operations), investing (building, renovations, purchasing) and operating (activities that finance company)\n\nFinancial activities\nCapital (money) is required to start any business. Methods for raising funds for corporations:\n\nissuing (selling) shares (equity financing)\nborrowing money (debt financing)\n\ncommon shares (share capital) - the amount paid by investors for shares of ownership in a company, these investors are shareholders\ndividends - payments that distribute a portion of income to shareholders\nliabilities - amounts owed to lender and creditors in form of debt and obligations\nbank indebtedness - this liability is when a company uses its operating line of credit to cover cash shortfalls and overdraws its bank account\nCorporations can borrow using a short-term bank loan payable (note payable) or long term debt which can include mortgages payable, bonds payable, finance lease obligations and other types of debt securities.\n\n\nInvesting activities\nPost fund raising, the money i sused for investing activities, which include purchase or sale of long lived assets that a company needs in order to operate.\nAssets - resources that a company owns or controls. “property, plant and equipment” phrase is used to sum up all the assets of a company.\ngoodwill - when a company pays more than the value of purchased company’s net identifiable assets when acquiring a company\nintangible assets - assets that do not have any physical substance themselves but represent a privilege or a right granted to a company\n\npurchase is outflow, sale is inflow\n\n\n\nOperating activities\nA company has raised funds and investments, it now does operating activities.\nSources of income (finance income):\n\nsales revenue\nservice revenue\ninterest revenue\nrent revenue\n\naccounts receivable - the operation of receiving money in the future from customers. This is an asset as they represent an economic resource (cash) and will be eventually collected.\n\nsupplies are short term assets used in daily operations\ninventory are items held for future sale to customers. When items are sold, they become an expense\n\nThe cost of inventory sold is an expense called cost of goods sold.\n\nexpenses are decreases in economic resources\nother names for expenses = cost of sales, selling operating and administrative expenses, and income tax expense.\n\naccounts payable - short term liability from some expenses when a company purchases inventory or supplies on credit from suppliers.\ninterest payable - the outstanding (unpaid) liability amounts owed to various lenders and creditors\n\ndividends payable, salaries payable, property payable, sales tax payable\n\nBusiness goal is to sell a good or service for a price greater than the cost of producing or purchasing the good or providing the service, plus the cost of operating the business.\nnet income - revenues are greater than the expenses incurred to generate the revenues. (net earnings, profit)\n\n\nFinancial statements\nFor external reporting purposes to provide information on assets,liabilities, shareholders equity and cash flow.\nThere are 4 required financial statements:\n\nincome statement - reports revenues and expenses, showing how a company’s operations performed during a period of time\nstatement of changes in equity - shows changes in each component of shareholders equity (common shares and retained earnings) and total equity during period of time\nstatement of financial position - what a company owns (assets), what it owes (liabilities) and resulting difference (shareholder equity) at a specific point in time\nstatement of cash flows - where a company obtained cash during a period of time and how that cash was used\n\n\nStatement of changes in Equity\nAccount balances at the beginning of the period and ends with the account balances at the end of the period. The ownership interest in a company is known as shareholder’s equity, which is the total shareholder’s equity including:\n\nshare capital : the amounts contributed by the shareholders in exchange for shares of ownership\nretained earnings\nother accounts\n\ncommon shares (end of period) = common shares (begin of period) + common shares issued (sold) - common shares repurchased\nretained earnings - the cumulative amounts of net income that have been retained in the corporation (not distributed as dividends to shareholders). If retained earnings is negative that is net loesses have exceeded net income (deficit)"
  },
  {
    "objectID": "chapter1.html#the-purpose-use-of-financial-statements",
    "href": "chapter1.html#the-purpose-use-of-financial-statements",
    "title": "2  Financial Accounting",
    "section": "2.1 The Purpose & Use of Financial Statements",
    "text": "2.1 The Purpose & Use of Financial Statements\nFinancial Statements provide the means of communicating the economic events of an organization and sharing with a variety of interested users.\nOne important function to calculate is the net income, using Python we can make a function to calculate this so in the future we can simply pass in the data required then get the output.\n`"
  },
  {
    "objectID": "pythonbasics.html",
    "href": "pythonbasics.html",
    "title": "1  Python Basics",
    "section": "",
    "text": "Hello, welcome to the crash course on Python basics! This section will get you very quickly introduced to Python in order for you to follow along with the book.\nThere are numerous Python tutorials that will help you fully understand the programming language. Some resources I personally have found very helpful (general python learning, various topics):\n\nReal Python tutorials. Very beginner friendly\nfreecodecamp (YouTube, 4.5 hours long) - Python full tutorial\nTech with Tim (YouTube)\nPatrick Loeber (YouTube)\n\nNone of the links above deal with accounting but will provide depth in explanations of the code you will see here.\n6+3"
  },
  {
    "objectID": "pythonbasics.html#variables",
    "href": "pythonbasics.html#variables",
    "title": "1  Python Basics",
    "section": "1.1 Variables",
    "text": "1.1 Variables\nVariables are names to store data. If you have a long variable name, use underscores (_) to keep the words together. For long numbers you can use the underscore to act like a comma, but do not use a comma like you would in Excel.\nSome simple rules for variable names:\n\nvariables can’t start with a dot or have a dot in the name (.)\nvariables can’t start with a number or special character\n\n\n\nShow the code\nvariable_one = \"variable string\"\n\nvariable_1 = 1\nvariable1 = 1\n\n\nVariables are essential in programming, you make a variable in order for you to use again and again. Variables are limited in where they can be accessed (used) in a program based on the function scope (scope ?) but allows for reprodicibility within your program."
  },
  {
    "objectID": "pythonbasics.html#strings",
    "href": "pythonbasics.html#strings",
    "title": "1  Python Basics",
    "section": "1.2 Strings",
    "text": "1.2 Strings\nStrings are typically letters but anything can be a string, as a string is anything inside ” ” or ’ ’ quotation marks. Strings are stored inside a variable which you get to name whatever you want. Note: some words are reserved and cannot be used; while, if, break, else, etc. If you use a reserved word you get an error and will not be able to run your code.\n\n\nShow the code\nstringy = \"pasta noodles\"\n\nchartered_accountant = \"Jane Doe\"\n\nstring_number = \"899\"\n\n\nEverything that is inside ” ” is considered a data type of string, this is important to remember as you can get errors or get output you are not expecting if you call (use) some functions on a string data type variable meant for a numerical data type.\n\n\nShow the code\na = \"5\"\nb = \"10\"\n\ny = a + b\n\n\nThe output for y is not 15, as that is numerical addition, instead you will get concatenation of strings a and b, resulting in “510”."
  },
  {
    "objectID": "pythonbasics.html#numbers-int-and-float",
    "href": "pythonbasics.html#numbers-int-and-float",
    "title": "1  Python Basics",
    "section": "1.3 Numbers (int and float)",
    "text": "1.3 Numbers (int and float)\nAccounting mainly deals with numbers with decimals, known as floats (floating point decimal numbers) and integers (numbers without decimals). Using these data types is easy to do, just create a variable and store the numerical value to that variable.\n\n\nShow the code\nx = 6754\ny = 122.78\n\nz = x + y \nz\n\n\n6876.78\n\n\nThe value of z is 6876.78. In a Python file (.py) you will need to use the print() function to see the answer, but using a Jupyter Notebook, you can simply add x and y and get the output printed."
  },
  {
    "objectID": "pythonbasics.html#string-formatting",
    "href": "pythonbasics.html#string-formatting",
    "title": "1  Python Basics",
    "section": "1.4 String formatting",
    "text": "1.4 String formatting\nTo print out the variables and calculations, you need to use the print() function. String formatting allows for reusable code and simpler code to write. Learning it now will help build the skill. Formatting uses the syntax f\" \" inside a print function with { } to store the variable name.\nFor rounding numbers when you want to only show numeric values that have limited decimal places you use the .format() function without using the f”” inside the print function.\n\ninside the {:.2f} means 2 decimal places format, the number can be 1 or more\nfor output numberical values that are long, you can use {:,} which means to add commas to the numbers\n\n\n\nShow the code\naccountant_name = \"Jane Doe\"\noffice_expenses = 105_900.7688128\n\nprint(f\" Hello Python Accountant {accountant_name} \")\nprint(\" The office budget is ${:.2f}\".format( office_expenses ))\nprint(\" The office budget is ${:,}\".format( office_expenses ))\n\n\n Hello Python Accountant Jane Doe \n The office budget is $105900.77\n The office budget is $105,900.7688128"
  },
  {
    "objectID": "pythonbasics.html#lists",
    "href": "pythonbasics.html#lists",
    "title": "1  Python Basics",
    "section": "1.5 Lists",
    "text": "1.5 Lists\nPython lists are very useful and are also known as arrays (when using the NumPy library).\n\ncan store various data items, duplicates are allowed which is important to know.\nLists can be empty and the values can be changed (mutable).\n\nIMPORTANT TO KNOW :\n\nevery list, dictionary, set and string all start at 0 zero not 1, start counting at 0 or use n - 1 to get the correct index value.\n\n\n\nShow the code\naccounting_list = ['shareholders equity',233, True,\"liabilities\", 99]\n\nprint( accounting_list )\n\n\n['shareholders equity', 233, True, 'liabilities', 99]\n\n\n\n1.5.1 Array slicing\nTo get specific elements in the array list you can use slicing. To get the 2nd item (element) from the list, remember n - 1 for index number.\n\n\nShow the code\naccounting_list[1]\n\n\n233\n\n\nTo get the last element in the array list, you can use -1, which means the 1st one from the end. If you wanted the second last element, -2, and so forth.\n\n\nShow the code\naccounting_list[-1]\n\n\n99\n\n\n\n\n1.5.2 Change element in list\nSay we want to change ‘liabilities’ to ‘purchases’, we use the index of element we want to change and assign the new variable.\n\n\nShow the code\naccounting_list[3] = \"purchases\"\naccounting_list\n\n\n['shareholders equity', 233, True, 'purchases', 99]\n\n\n\n\n1.5.3 Get more than 1 element\nIf you are interested in only a few or specific elements in a list you can specify the indexes of the elements of the list. In this example, we want the first to the second elements.\n\n\nShow the code\naccounting_list[0:3]\n\n\n['shareholders equity', 233, True]\n\n\n\n\n1.5.4 List length\nKnowing how long a list is, how many elements that are inside the list object is very useful to know for using in for loops.\n\n\nShow the code\nlen( accounting_list )\n\n\n5\n\n\n\n\n1.5.5 Add elements to list\nPython lists can be modified by adding to the list array. Since we store all of the elements into a variable we can use the name of the list and call functions on that variable such as .append() to add to an existing list.\nIn this example we just want to add ‘income_sheets’ to the list. Note: if you call this function more than once, Python will keep adding this one variable to the list.\n\n\nShow the code\naccounting_list.append(\"income_sheets\")\naccounting_list\n\n\n['shareholders equity', 233, True, 'purchases', 99, 'income_sheets']\n\n\n\n\n1.5.6 Join lists\nIf you have one list array and want to join or merge them together, you can use .extend() function.\n\n\nShow the code\nsheet1 = [\"Accounts payable\",\"debts receivable\",\"credit payable\"]\nsheet2 = [\"balance sheet\",\"assets & liabilities\"]\n\nsheet1.extend(sheet2)\n\nprint( sheet1 )\n\n\n['Accounts payable', 'debts receivable', 'credit payable', 'balance sheet', 'assets & liabilities']\n\n\n\n\n1.5.7 Delete element\nYou can delete an element from a list array, using the pop() function which by default removes the very last element in an array, but if you provide the index number it will remove that element.\nIn this example we will remove the element “True” from index 2. Note: Python will keep deleting elements from your list if this function is called repeatedly.\n\n\nShow the code\naccounting_list.pop(2)\naccounting_list\n\n\n['shareholders equity', 233, 'purchases', 99, 'income_sheets']\n\n\n\n\n1.5.8 List for loops\nfor loops are functions that will iterate over a Python object such as a list or dictionary, dataframe or even a string. For loops are important to know and are essential for becoming efficient in programming.\nIf you have a list of assets and quickly want to print them out to see what they are or perform a math function for loops are what to use.\nIn this example we want to loop through the numbers 0 to 4, and print out each number. The range() by default understands what the start and end of the range is but could be explicitly defined. If you wanted 1 to 5, range(1,6).\n\nNote: “for x in something”, the x can be named just about anything (just not a reserved word in Python).\n\n\n\nShow the code\nfor x in range(5):\n    print(x)\n\n\n0\n1\n2\n3\n4\n\n\nSay we have a list of a client’s assets, and we want it iterate through the list and print them. We want to know the length of the list in order to tell the for loop to stop at the end of the list, this serves 2 purposes: 1) you can modify the list (add or delete elements) and the for loop will keep working, and 2) by knowing the length of the list prevents errors when looping through a list and tries to find an element index that does not exist.\n\nrange( len( list_name ))\nindex of the loop is needed, hence client_assets[items] which goes through the list array and prints the index location value\n\n\n\nShow the code\nclient_assets = ['boat','house','fancy car','comic book collection','stocks']\n\nfor items in range( len( client_assets )):\n    print( client_assets[items] )\n\n\nboat\nhouse\nfancy car\ncomic book collection\nstocks\n\n\nUsing for loops is going to be something you will need to understand and get comfortable with in order to make your accounting more efficient.\nWhile loops will be purposefully ignored as they are very easy to mess up and crash your program. You may wish to learn them on your own but I caution you not to unless you have experience coding in Python.\n\n\n1.5.9 List sorting\nYou can sort or reverse a list, simply by calling .sort() function and .reverse() on the list variable name.\n\n\nShow the code\ncommon_assets = ['z item','investments','cash','inventory','supplies']\n\ndividends_paid = [100,1001.1,1020,101,300,301,90,9]\n\ncommon_assets.sort()\ndividends_paid.sort()\n\nprint( common_assets )\nprint( dividends_paid )\n\n\n# reverse\ndividends_paid.reverse()\nprint( dividends_paid )\n\n\n['cash', 'inventory', 'investments', 'supplies', 'z item']\n[9, 90, 100, 101, 300, 301, 1001.1, 1020]\n[1020, 1001.1, 301, 300, 101, 100, 90, 9]"
  },
  {
    "objectID": "pythonbasics.html#tuples",
    "href": "pythonbasics.html#tuples",
    "title": "1  Python Basics",
    "section": "1.6 Tuples",
    "text": "1.6 Tuples\nTuples store data but are immutable and tuples index each element. Say we want to store 3 holiday gift ideas for the office.\n\n\nShow the code\ngifts = ('Subway sandwich gift card',\"Starbucks coffee gift card\", \"Apple iTunes gift card\")\n\nprint( gifts[2:3])\n\n\n('Apple iTunes gift card',)\n\n\nand to loop through the tuple\n\n\nShow the code\nfor xmas in gifts:\n  print(xmas)\n\n\nSubway sandwich gift card\nStarbucks coffee gift card\nApple iTunes gift card"
  },
  {
    "objectID": "pythonbasics.html#sets",
    "href": "pythonbasics.html#sets",
    "title": "1  Python Basics",
    "section": "1.7 Sets",
    "text": "1.7 Sets\nSets and dictionaries both use { }, but sets are immutable, but elements can be added or dropped. Sets are unordered and not indexed. Sets do not allow duplicates to exist in the set.\nIn this example we have taxes filed each year, then we append a year after we made our set.\n\n\nShow the code\ntaxes_years = {2015, 2016, 2017, 2018}\n\ntaxes_years.add(2009)\nprint(taxes_years)\n\n\n{2016, 2017, 2018, 2009, 2015}\n\n\nto remove a tax year\n\n\nShow the code\ntaxes_years.remove(2009)\ntaxes_years\n\n\n{2015, 2016, 2017, 2018}\n\n\nwe can loop through the set\n\n\nShow the code\nfor year in taxes_years:\n  print(f\"finished with taxes for {year}\")\n\n\nfinished with taxes for 2016\nfinished with taxes for 2017\nfinished with taxes for 2018\nfinished with taxes for 2015"
  },
  {
    "objectID": "pythonbasics.html#dictionaries",
    "href": "pythonbasics.html#dictionaries",
    "title": "1  Python Basics",
    "section": "1.8 Dictionaries",
    "text": "1.8 Dictionaries\nThis book will use data dictionaries extensively, as they are very versatile, easy to use and modify. If you later want to make a data dictionary a dataframe, you can with the help of the Pandas library. Once you have a dataframe created or converted from a data dictionary you can save it as a CSV or other formats.\nData dictionaries are ordered, mutable and have keys and value pairs (‘key’ : ‘value’).\n\ndictionaries do not allow duplicates of keys\ndictionaries are not indexed, grab elements by key or value\nit is good practice to Pascal_Case or CamelCase your keys (also with everything) as it will help with tab-auto complete and grabbing the key you want\n\nIn this example we have some financial information of assets.\n\n\nShow the code\nall_assets = {\n  \"cash\": 3098772.89,\n  'inventory': 7886.23,\n  \"supplies\": 56234.56,\n  \"prepaid_expenses\": 14521\n}\n\n\n\n1.8.1 select key\nIn this example we want to get the value for cash, so we slice the dictionary and use the key name to get the value.\n\n\nShow the code\nall_assets['cash']\n\n\n3098772.89\n\n\n\n\n1.8.2 dictionary length\nFind out how many elements are in a data dictionary\n\n\nShow the code\nlen(all_assets)\n\n\n4\n\n\n\n\n1.8.3 all items\nIf you wanted to print out all the items in a dictionary, use .items() function\n\n\nShow the code\nall_assets.items()\n\n\ndict_items([('cash', 3098772.89), ('inventory', 7886.23), ('supplies', 56234.56), ('prepaid_expenses', 14521)])\n\n\n\n\n1.8.4 dictionary keys\nIf you want to know the keys for the dictionary in order to use them for a function, use the .keys() function.\n\n\nShow the code\nall_assets.keys()\n\n\ndict_keys(['cash', 'inventory', 'supplies', 'prepaid_expenses'])\n\n\n\n\n1.8.5 modify a key\nIf the key has a value that needs to be changed, you can use the slice and key name method and assign a new value.\nIn this example we will give a new value for the property key.\n\n\nShow the code\nall_assets['property'] = 788655\nall_assets.items()\n\n\ndict_items([('cash', 3098772.89), ('inventory', 7886.23), ('supplies', 56234.56), ('prepaid_expenses', 14521), ('property', 788655)])\n\n\n\n\n1.8.6 dictionary values\nIf you just wanted to see the values stored in a dictionary, use the .values() function.\n\n\nShow the code\nall_assets.values()\n\n\ndict_values([3098772.89, 7886.23, 56234.56, 14521, 788655])\n\n\n\n\n1.8.7 check dictionary\nIf we had a large dictionary and quickly wanted to check if a specific key exists inside the dictionary, we can use a if statement with in dictionary_name.\nIn this example we will search if “supplies” exists in the all_assets.\n\n\nShow the code\nif \"supplies\" in all_assets:\n  print(\" 'supplies' was found in the dictionary\" )\n\n\n 'supplies' was found in the dictionary\n\n\n\n\n1.8.8 dictionary for loops\nAs mentioned previously, for loops are very much part of programming, you want to iterate over a list or some data object and do some sort of action along the process. We can iterate over a data dictionary to see what a specific client has for assets and by type.\nIn this example we will loop through all assets and show that the client is Dunder Mifflin’s assets by type of category.\n\n\nShow the code\nfor DunderMifflin in all_assets:\n  print(f\"Dunder Mifflin assets $ { all_assets[ DunderMifflin]} [{DunderMifflin}]\")\n\n\nDunder Mifflin assets $ 3098772.89 [cash]\nDunder Mifflin assets $ 7886.23 [inventory]\nDunder Mifflin assets $ 56234.56 [supplies]\nDunder Mifflin assets $ 14521 [prepaid_expenses]\nDunder Mifflin assets $ 788655 [property]\n\n\n\n\n1.8.9 dictionary copy\nOnce you have a data dictionary, you can make a copy as to make sure you have a safe copy from any deletions or whatever may be the case. You can make copies for a client each quarter and only need to modify a few items instead of starting from scratch. To make a copy of a dictionary, use the .copy() function.\nIn this example we will make a copy of all_assets and with the new copy we will create a new element and append it to the dictionary.\n\n\nShow the code\nprint(f\" Original: {all_assets}\\n\")\n\nassets_2 = all_assets.copy()\n\nprint(f\" Copy: {assets_2}\\n\")\n\nassets_2['yacht'] = 1086777\n\nprint(\"....\", assets_2, '\\n')\n\n\n Original: {'cash': 3098772.89, 'inventory': 7886.23, 'supplies': 56234.56, 'prepaid_expenses': 14521, 'property': 788655}\n\n Copy: {'cash': 3098772.89, 'inventory': 7886.23, 'supplies': 56234.56, 'prepaid_expenses': 14521, 'property': 788655}\n\n.... {'cash': 3098772.89, 'inventory': 7886.23, 'supplies': 56234.56, 'prepaid_expenses': 14521, 'property': 788655, 'yacht': 1086777}"
  },
  {
    "objectID": "pythonbasics.html#conditionals",
    "href": "pythonbasics.html#conditionals",
    "title": "1  Python Basics",
    "section": "1.9 Conditionals",
    "text": "1.9 Conditionals\nYou are already familiar with conditionals in everyday life, if x then y. We a;ready used an if statement to check if “supplies” was in the data dictionary. Knowing conditional statements such as If-Else statements are a core part of programming.\n\nEquals: a == b\nnot equal: a != b\nless than: a < b\nless than or equal to: a <= b\ngreater than: a > b\ngreater than or equal to: a >= b\n\nNote: If-Else statements are where indentation matters.\n\n\nShow the code\nrevenue = 110\nexpenses = 120\n\nif revenue > expenses:\n  print(\"you have money\")\nelse:\n  print(\"expenses !\")\n\n\nexpenses !\n\n\nThere is a way to add to this simple example, we can add an elif which means else-if. The condition block of code will check if revenue is greater than expenses else if another condition is true do something, else neither conditions were true.\nConditionals can be as long as needed, however using a bunch of if statements is not advised, as the computer will check only for the specific condition that makes it true and breaks out of the code block. Using an If-Elif-Else block ensures that all qualifying conditions are checked.\n\n\nShow the code\nrevenue = 110\nexpenses = 110\n\nif revenue > expenses:\n  print(\"you got money\")\nelif revenue == expenses:\n  print(\"breakeven point\")\nelse:\n  print(\"those expenses!\")\n\n\nbreakeven point"
  },
  {
    "objectID": "pythonbasics.html#functions",
    "href": "pythonbasics.html#functions",
    "title": "1  Python Basics",
    "section": "1.10 Functions",
    "text": "1.10 Functions\nFunctions are so important to know! Functions will help you be more efficient and more productive.\nIf you are doing a task more than 3 times, it is wise to make that task into a function. Accounting has so many mundane routine calculations that learning to make functions will make accounting faster.\n\nIn Python, a function starts with def followed by a function name you provide, () then a : and your code is indented underneath the ‘def function_name():’\nInside the function_name( arguments ) . These arguments are what you pass into the function, you can pass in an array or a dictionary . You do not have to pass in anything.\n\nNote: in many Python documentation guides you will see ‘func’ for naming a function, along with ‘foo’ and ‘bar’\nLet us create a simple function that prints out a message.\n\n\nShow the code\n#-------------------- function block\ndef my_function():\n  \n  print(\"Hi, my first function!\")\n  \n#-------------------- \n\n#- outside of the function block\n#- call your function by typing the name of it\nmy_function()\n\n\nHi, my first function!\n\n\nIndentation matters when dealing with conditionals and functions, you will get errors if your code is not properly indented.\n\n1.10.1 Function with argument\nOnce you get the handle of how functions work and how to call them, next is to pass in the function a argument, a data object or a string that is then used by the function. Just like in math textbooks f(x) you pass in x as a number then the “f” function makes a calculation.\nIn this example we will pass in job in the function “()” where function arguments go.\n\n\nShow the code\ndef my_function( job ):\n  print(f\"your job is {job}\")\n  \n\n# call the function and pass in a argument\nmy_function(\"Accounting\")\n\n\nyour job is Accounting\n\n\nAs the function exists you could pass in a number or another data type object, you will want to make your functions explicitly define what data type is expected for the argument as to avoid errors.\n\n\n1.10.2 function net income\nThis function will be calculating the net income, but this time the arguments in the function will be explicitly defined as int meaning integer data types. Passing in a float would still work as it is type numeric.\n\nyou can enforce data types into your arguments so if you want only numeric values and not strings to be entered into your function, use arg_name : int , arg_name : float. This helps reduce code errors.\nif you type: net_income(expenses= “900”, revenue=78) == ERRORS\n\n\n\nShow the code\ndef net_income(revenue: int, expenses: int):\n    # formula for net income\n    net = revenue - expenses\n    \n    print(f\"Net (loss) income = $ {net}\")\n    \n    \n#-- outside function block\nnet_income(revenue= 187568, expenses= 167812)\n\n\nNet (loss) income = $ 19756\n\n\nWhen calling the function you do not have to type the argument, just the value it is expecting, however it is good to type what arguments you are using for a function.\n\n\n1.10.3 Function with a list\nWe can make a function that will loop through the list and then print out when the item was checked.\nThis example will have a list of common assets which will be passed in the function number_crunch as an argument. The for loop will start from length of list -1, as Python is zero indexed.\n\n\nShow the code\ndef number_crunch( assets ):\n  \n  L = len(assets)\n  print(f\"Number of assets = {L}\\n\")\n  \n  #--------------------------- for loop\n  for wealth in assets:\n    print(f\" {wealth} ... checked\")\n  #---------------------------\n  \n#--\ncommon_assets = ['investments','cash','yacht','cabin','vacation home']\n\nnumber_crunch( common_assets )\n\n\nNumber of assets = 5\n\n investments ... checked\n cash ... checked\n yacht ... checked\n cabin ... checked\n vacation home ... checked\n\n\n\n\n1.10.4 Function with a dictionary\nAs mentioned in the dictionary section, dictionaries are very pliable data objects and are great as an option to store data. Data dictionaries are very similar to JSON data objects, so it is helpful to be used to working with them and passing them into functions.\nThis book will heavily use data dictionaries for function arguments, these function will pull values from specified keys to be used in calculations.\nIn this example we will have a dictionary for assets which will be passed in the function the_count.\n\n\nShow the code\nassets = {\n    \"cash\": 300322.78,\n    \"inventory\": 7886.23,\n    \"supplies\": 56234.56,\n    'prepaid expenses': 14560\n} \n\n\ndef the_count( acc_dict ):\n    \n    #------ convert dictionary to a list\n    dict_list = list( acc_dict.values() )\n    #-- for loop of values\n    for num in dict_list:\n        print(num)\n    \n    # sum the assets\n    s = sum( dict_list )\n    print(\"sum of assets = $ {:,}\".format(s))\n\n# use the assets dictionary from above \n\nthe_count( assets )\n\n\n300322.78\n7886.23\n56234.56\n14560\nsum of assets = $ 379,003.57\n\n\nThis function used a few tricks, the dictionary argument was converted to a list data object, which stores the dictionary values. Once the dictionary list was created and had all the values, a for loop was used to iterate over the list. The dictionary list was then summed using the sum() function and stored in a variable ‘s’ and printed out.\nThe conversion of a data dictionary to a list is needed for any future looping, you can’t loop through a dictionary."
  },
  {
    "objectID": "pythonbasics.html#python-classes",
    "href": "pythonbasics.html#python-classes",
    "title": "1  Python Basics",
    "section": "1.11 Python Classes",
    "text": "1.11 Python Classes\nPython classes are not considered a basic level topic, it is complicated and easy to get confused. I include it as a means of showing that you can bundle all of the functions in one file and then extract the specific functions you need. You need to understand how functions work and be comfortable with them before you attempt to work with classes. A class object has inheritance, it can store a data object(s), have multiple functions (which are called methods inside a class) and can be imported to another file.\nClass objects start with a capital letter, this is convention and is to signify that this is a class and not a regular function. I will show what a simple class object looks like, but will let you learn more about them on your own.\n\n\nShow the code\nclass Simple_class:\n  def __init__(self, name, age): # class self referencing arguments\n        self.name = name\n        self.age = age    # self.name = name  declares the argument \n        \n  # class property\n  class_property = \"simple_class: property value\"\n    \n  #-- class method\n  def number(self):\n    x= 1898\n    print(x)\n    \n    \n# ----- important\n# similar to calling functions but this is called INSTANTIATE or \n# creating an OBJECT INSTANCE of the class\n\nobj = Simple_class(\"Python\", 28) # pass in values for class arguments\n\n# now that there is an object we can get properties from the class\nobj.class_property\n\n\n'simple_class: property value'\n\n\nCall the class method number() to get a number\n\n\nShow the code\nobj.number()\n\n\n1898\n\n\nTo aid in understanding, Python has a library called Math (comes with Python installation) and it has many math functions that you would typically want to use. When you want to square root a number you need to use Math.sqrt(), the square root function is inside the class called Math. In order to have access to this math function or any other you need to import the library into your python file. The “obj.number()” is same type of code used to get the math function from the class Math.\nClass inheritance is the next thing to learn when learning about class objects, which is not the focus of this book. As shown, class objects are very helpful for storing multiple or doing multiple things at once."
  },
  {
    "objectID": "chapter1.html#cost-concepts",
    "href": "chapter1.html#cost-concepts",
    "title": "2  Financial Accounting",
    "section": "2.1 Cost Concepts",
    "text": "2.1 Cost Concepts\nManagerial cost concepts and behavior analysis has 3 main components; managerial cost concepts, cost behavior analysis and manufacturing costs in financial statements.\n\n2.1.1 Manufacturing Costs\nTo manage costs, a manager needs to have information in order to plan, direct and control operations.\n\nManufacturing is activities that convert raw materials into finished goods.\n\nThe manufacturing process:\n\ndirect materials - raw materials, basic materials parts used in the manufacturing process.\nindirect material - materials that do not physically become part of the finished product and they can’t be easily traced because physical association with the finished product is too small in terms of cost (accounted under manufacturing overhead).\ndirect labor - the employees that are physically and directly involved in the conversion of raw materials into finished goods.\nindirect labor - work that is indirect is work that has no physical association with the finished product and is work is too cumbersome to trace back to the cost of goods made.\nmanufacturing overhead - costs that are indirectly associated with the finished product, these specific costs can’t be classified as direct materials or labor.\n\n\nprime cost = sum of all the direct material and labor costs\nconversion costs = the sum of all direct labor and manufacturing overhead costs\nproduct costs - the sum of all necessary costs in producing the finished product\nperiod costs - costs that match the revenue of a specific time period instead of the cost of a salable product (non-manufacturing costs), selling and administrative expenses are period costs.\n\n\n\n2.1.2 Cost example\nThis section will go through an example of cost. Say there is a company that makes hoverboards (like the ones in Back to the Future movie series), the following is the manufacturing costs.\n\nmaterial cost ($30) per board\nlabor costs ($40) per board\ndepreciation on factory equipment ($25,000 per year)\nproperty taxes on factory building ($6,000 per year)\nadvertising costs ($30,000 per year)\nmaintenance salaries ($45,000 per year)\nsalary of plant manager ($70,000)\ncost of shipping boards ($18 per board)\n\nWe will use a data dictionary for storing the values from above. Then, let us make a function to calculate all of the costs.\n\n\nShow the code\nhoverboards = {\n  'material_cost' : 30,\n  'labor_cost' : 40,\n  'depreciation_equipment': 25e3, # 25,000\n  'property_tax_bldg': 6e3,       # 6,000\n  'advertising_cost': 30e3,\n  'maint_salaries': 45e3,\n  'salary_plant_manager': 70e3,\n  'shipping_cost': 18\n}\n\n\nMake a function to calculate the total manufacturing costs. This function’s argument will use the data type dictionary as input for our calculations. The second thing we want to know is how many hoverboards were made? We can get user input for a number, as this makes the function flexible for future use.\n\n\nShow the code\ndef manufacturing_costs( dict, num_boards: int ):\n  manuf_costs = (dict['material_cost'] * num_boards) + (dict['labor_cost'] * num_boards) + \\\n                 dict['depreciation_equipment'] + dict['property_tax_bldg'] + \\\n                 dict['maint_salaries'] + dict['salary_plant_manager']\n                 \n  print(\"\\nTotal manufacturing costs = ${:,}\".format(manuf_costs))\n\n\nNow we call our function and say as that there were 10,000 hoverboards made.\n\n\nShow the code\nmanufacturing_costs( hoverboards, num_boards= 10e3)\n\n\n\nTotal manufacturing costs = $846,000.0"
  }
]